This is assignment 1.03. At first, I tried using the professors priority queue and dijkstra's implementation but decided it was too complex. So, with the help of GeeksForGeeks, I implemented a priority queue through a singly linked list from their website. Pretty straightforward and simple priority queue that gets the job done. I then implemented dijkstra's algorithm using geeksforgeeks pseudocode as well which said this:

1) Initialize distances of all vertices as infinite.

2) Create an empty priority_queue pq.  Every item
   of pq is a pair (weight, vertex). Weight (or 
   distance) is used  as first item  of pair
   as first item is by default used to compare
   two pairs

3) Insert source vertex into pq and make its
   distance as 0.

4) While either pq doesn't become empty
    a) Extract minimum distance vertex from pq. 
       Let the extracted vertex be u.
    b) Loop through all adjacent of u and do 
       following for every vertex v.

           // If there is a shorter path to v
           // through u. 
           If dist[v] > dist[u] + weight(u, v)

               (i) Update distance of v, i.e., do
                     dist[v] = dist[u] + weight(u, v)
               (ii) Insert v into the pq (Even if v is
                    already there)
               
5) Print distance array dist[] to print all shortest
   paths.



I currently calculate the distances on the FIRST map generated and not for any other map. Thanks for your time!